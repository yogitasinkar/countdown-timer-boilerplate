{"version":3,"sources":["logo.svg","components/Clock.jsx","components/CountdownForm.jsx","components/Countdown.jsx","App.js","serviceWorker.js","index.js"],"names":["module","exports","Clock","props","formatTime","bind","timeInSeconds","seconds","minutes","Math","floor","this","className","React","Component","CountdownForm","state","errorEnum","isError","errorMsg","refs","value","e","preventDefault","secondsStr","time","parseInt","resetForm","isNaN","setState","onSetCountdownTime","ref","onSubmit","type","placeholder","disabled","count","style","color","Countdown","timer","setTimeout","prevState","clearTimeout","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"0KAAAA,EAAOC,QAAU,IAA0B,kC,iJCwC5BC,E,kDArCX,WAAYC,GAAQ,IAAD,8BACf,cAAMA,IAEDC,WAAa,EAAKA,WAAWC,KAAhB,gBAHH,E,uDAORC,GACP,IAAIC,EAAUD,EAAgB,GAC1BE,EAAUC,KAAKC,MAAMJ,EAAgB,IAUzC,OARIC,EAAU,KACVA,EAAU,IAAMA,GAGhBC,EAAU,KACVA,EAAU,IAAMA,GAGbA,EAAU,IAAMD,I,+BAGjB,IACDD,EAAiBK,KAAKR,MAAtBG,cAEL,OACE,yBAAKM,UAAU,SACb,0BAAMA,UAAU,cACXD,KAAKP,WAAWE,S,GA7BbO,IAAMC,WCsEXC,E,kDArEb,WAAYZ,GAAQ,IAAD,8BACjB,cAAMA,IAEDa,MAAQ,CACXC,UAAW,CACTC,SAAS,EACTC,SAAU,KANG,E,wDAYjBR,KAAKS,KAAKb,QAAQc,MAAQ,K,+BAGnBC,GAGPA,EAAEC,iBAEF,IAAIC,EAAab,KAAKS,KAAKb,QAAQc,MAC/BI,EAAOC,SAASF,GAEpBb,KAAKgB,YACDC,MAAMH,IAASA,EAAO,EACxBd,KAAKkB,SAAS,CACZZ,UAAW,CACTC,SAAS,EACTC,SAAU,iCAKhBR,KAAKkB,SAAS,CACZZ,UAAW,CACTC,SAAS,KAGbP,KAAKR,MAAM2B,mBAAmBL,M,+BAI9B,OACE,6BACE,0BACEM,IAAI,OACJC,SAAUrB,KAAKqB,SAAS3B,KAAKM,MAC7BC,UAAU,kBAEV,2BACEqB,KAAK,OACLF,IAAI,UACJG,YAAY,0BAEd,2BACED,KAAK,SACLE,SAAUxB,KAAKR,MAAMiC,MAAM,EAC3BxB,UAAU,0BACVS,MAAM,qBAGTV,KAAKK,MAAMC,UAAUC,SACpB,uBAAGmB,MAAO,CAAEC,MAAO,QAAU3B,KAAKK,MAAMC,UAAUE,e,GA/DhCN,IAAMC,WC8CnByB,E,kDAzCb,WAAYpC,GAAQ,IAAD,8BACjB,cAAMA,IAMR2B,mBAAqB,SAACL,GACpB,EAAKI,SAAS,CACVO,MAAOX,KAPX,EAAKT,MAAQ,CACXoB,MAAO,GAHQ,E,iEAeG,IAAD,OACnB,GAAIzB,KAAKK,MAAMoB,MAAQ,EAAG,CACvB,IAAMI,EAAQC,YAAW,WACxB,EAAKZ,UAAS,SAACa,GAAD,MAAgB,CAC5BN,MAAOM,EAAUN,MAAQ,QAE1B,KACH,OAAO,kBAAMO,aAAaH,O,+BAKpB,IAAD,OACCJ,EAAUzB,KAAKK,MAAfoB,MACR,OACE,6BACE,kBAAC,EAAD,CAAO9B,cAAe8B,IACtB,kBAAC,EAAD,CACEA,MAAOA,EACPN,mBAAoB,SAACL,GAAD,OAAU,EAAKK,mBAAmBL,W,GArCxCZ,IAAMC,WCQf8B,MARf,WACE,OACE,yBAAKhC,UAAU,OACd,kBAAC,EAAD,QCKeiC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.3e800c36.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.ee7cd8ed.svg\";","import React from 'react';\r\n\r\nclass Clock extends React.Component {\r\n    constructor(props) {\r\n        super(props)\r\n        \r\n        this.formatTime = this.formatTime.bind(this);\r\n    }\r\n    \r\n\r\n    formatTime(timeInSeconds) {\r\n        var seconds = timeInSeconds % 60;\r\n        var minutes = Math.floor(timeInSeconds / 60);\r\n\r\n        if (seconds < 10) {\r\n            seconds = '0' + seconds;\r\n        }\r\n\r\n        if (minutes < 10) {\r\n            minutes = '0' + minutes;\r\n        }\r\n\r\n        return minutes + ':' + seconds;\r\n    }\r\n\r\n    render() {\r\n        var {timeInSeconds} = this.props;\r\n        //Keep the classes name. Try to inject your code and do not remove existing code\r\n        return (\r\n          <div className=\"clock\">\r\n            <span className=\"clock-text\">\r\n                {this.formatTime(timeInSeconds)}\r\n            </span>\r\n          </div>\r\n        );\r\n    }\r\n}\r\n\r\n\r\n\r\nexport default Clock;","import React from 'react';\r\n\r\nclass CountdownForm extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      errorEnum: {\r\n        isError: false,\r\n        errorMsg: \"\",\r\n      },\r\n    };\r\n  }\r\n\r\n  resetForm() {\r\n    this.refs.seconds.value = \"\";\r\n  }\r\n\r\n  onSubmit(e) {\r\n    //This will give you string for seconds. Do not remove refs\r\n\r\n    e.preventDefault();\r\n \r\n    var secondsStr = this.refs.seconds.value;\r\n    let time = parseInt(secondsStr);\r\n\r\n    this.resetForm();\r\n    if (isNaN(time) || time < 0) {\r\n      this.setState({\r\n        errorEnum: {\r\n          isError: true,\r\n          errorMsg: \"Please enter a valid time.\",\r\n        },\r\n      });\r\n      return;\r\n    }\r\n    this.setState({\r\n      errorEnum: {\r\n        isError: false,\r\n      },\r\n    });\r\n    this.props.onSetCountdownTime(time);\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        <form\r\n          ref=\"form\"\r\n          onSubmit={this.onSubmit.bind(this)}\r\n          className=\"countdown-form\"\r\n        >\r\n          <input\r\n            type=\"text\"\r\n            ref=\"seconds\"\r\n            placeholder=\"Enter time in seconds\"\r\n          />\r\n          <input\r\n            type=\"submit\"\r\n            disabled={this.props.count>0}\r\n            className=\"button success expanded\"\r\n            value=\"Start Countdown\"\r\n          />\r\n        </form>\r\n        {this.state.errorEnum.isError && (\r\n          <p style={{ color: \"red\" }}>{this.state.errorEnum.errorMsg}</p>\r\n        )}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default CountdownForm;","import React  from 'react';\r\nimport Clock from './Clock';\r\nimport CountdownForm from './CountdownForm';\r\n\r\nclass Countdown extends React.Component {\r\n\r\n  \r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      count: 0,\r\n    };\r\n  }\r\n\r\n  onSetCountdownTime = (time) => {\r\n    this.setState({\r\n        count: time\r\n    });\r\n  };\r\n \r\n  \r\n\r\n  componentDidUpdate() {\r\n    if (this.state.count > 0) {\r\n       const timer = setTimeout(() => {    \r\n        this.setState((prevState) => ({\r\n          count: prevState.count - 1,\r\n        }));\r\n      }, 1000);\r\n      return () => clearTimeout(timer)\r\n    }\r\n  }\r\n\r\n\r\n  render() {\r\n    const { count } = this.state;\r\n    return (\r\n      <div>\r\n        <Clock timeInSeconds={count} />\r\n        <CountdownForm\r\n          count={count}\r\n          onSetCountdownTime={(time) => this.onSetCountdownTime(time)}\r\n        />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Countdown;","import React from 'react';\r\nimport logo from './logo.svg';\r\nimport './App.css';\r\nimport Countdown from \"./components/Countdown\";\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n     <Countdown></Countdown>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}